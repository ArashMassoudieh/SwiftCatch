cmake_minimum_required(VERSION 3.16)

# Project Name and Version
project(SwiftCatch VERSION 1.0 LANGUAGES CXX)

# Require C++17 or higher
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Find Qt6 Packages (Widgets, Core, Charts, Network)
find_package(Qt6 REQUIRED COMPONENTS Widgets Core Charts Network)

# Find GDAL (Use only one method)
find_package(GDAL REQUIRED)

set(GDAL_INCLUDE_DIR "/usr/include/gdal")
set(GDAL_LIBRARY "/usr/lib/libgdal.so")

include_directories(${GDAL_INCLUDE_DIR})
link_libraries(${GDAL_LIBRARY})

message(STATUS "Manually Set GDAL_INCLUDE_DIR: ${GDAL_INCLUDE_DIR}")
message(STATUS "Manually Set GDAL_LIBRARY: ${GDAL_LIBRARY}")


# Debugging: Print GDAL paths
message(STATUS "GDAL_INCLUDE_DIRS: ${GDAL_INCLUDE_DIRS}")
message(STATUS "GDAL_LIBRARIES: ${GDAL_LIBRARIES}")

# Specify UI Files
set(UI_FILES 
    mainwindow.ui 
    hydrodownloaderdlg.ui 
    weatherdownloaderdlg.ui
)

# Include Directories
target_include_directories(SwiftCatch PRIVATE ${GDAL_INCLUDE_DIRS})
target_include_directories(SwiftCatch PRIVATE ${CMAKE_SOURCE_DIR}/Utilities})

# Add Executable Target (Processes .ui files automatically)
qt_add_executable(SwiftCatch
    main.cpp
    mainwindow.cpp
    mainwindow.h
    hydrodownloaderdlg.cpp
    hydrodownloaderdlg.h
    weatherdownloaderdlg.cpp
    weatherdownloaderdlg.h
    Utilities/BTC.hpp
    Utilities/BTC.h
    Utilities/BTCSet.hpp
    Utilities/BTCSet.h
    Utilities/Utilities.cpp
    Utilities/Utilities.h
    ${UI_FILES}
)

# Link Libraries
target_link_libraries(SwiftCatch PRIVATE Qt6::Widgets Qt6::Core Qt6::Charts Qt6::Network ${GDAL_LIBRARIES})

